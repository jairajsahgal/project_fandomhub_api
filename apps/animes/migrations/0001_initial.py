# Generated by Django 5.0.1 on 2024-06-08 03:52

import apps.utils.paths
import apps.utils.validators
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('genres', '0001_initial'),
        ('producers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Broadcast',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_available', models.BooleanField(db_index=True, default=True, verbose_name='is available')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='updated at')),
                ('string', models.CharField(blank=True, max_length=50, verbose_name='string')),
                ('day', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10, verbose_name='day')),
                ('time', models.TimeField(verbose_name='time')),
                ('timezone', models.CharField(choices=[('JST', 'Japan Standard Time'), ('PST', 'Pacific Standard Time'), ('EST', 'Eastern Standard Time'), ('CST', 'Central Standard Time'), ('GMT', 'Greenwich Mean Time'), ('CET', 'Central European Time')], default='JST', max_length=3, verbose_name='timezone')),
            ],
            options={
                'verbose_name': 'broadcast',
                'verbose_name_plural': 'broadcasts',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_available', models.BooleanField(db_index=True, default=True, verbose_name='is available')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='updated at')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (eng)')),
                ('name_jpn', models.CharField(max_length=255, unique=True, verbose_name='name (jpn)')),
                ('name_rom', models.CharField(blank=True, max_length=255, unique=True, verbose_name='name (rmj)')),
                ('alternative_names', models.JSONField(blank=True, default=list, null=True, verbose_name='alternative names')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.utils.paths.picture_image_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'webp']), apps.utils.validators.ImageSizeValidator(max_height=1280, max_width=909), apps.utils.validators.FileSizeValidator(limit_mb=2)], verbose_name='image')),
                ('trailer', models.URLField(blank=True, max_length=255, verbose_name='trailer')),
                ('synopsis', models.TextField(blank=True, null=True, verbose_name='synopsis')),
                ('background', models.TextField(blank=True, null=True, verbose_name='background')),
                ('season', models.CharField(choices=[('winter', 'Winter'), ('spring', 'Spring'), ('summer', 'Summer'), ('fall', 'Fall')], db_index=True, max_length=10, verbose_name='season')),
                ('year', models.IntegerField(db_index=True, default=2010, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)], verbose_name='year')),
                ('media_type', models.CharField(choices=[('tv', 'TV'), ('ova', 'OVA'), ('movie', 'Movie'), ('special', 'Special'), ('ona', 'ONA'), ('music', 'Music')], default='tv', max_length=10, verbose_name='media type')),
                ('source', models.CharField(choices=[('original', 'Original'), ('manga', 'Manga'), ('novel', 'Novel'), ('lnovel', 'Light Novel'), ('vnovel', 'Visual Novel'), ('game', 'Game'), ('book', 'Book'), ('radio', 'Radio'), ('music', 'Music')], default='manga', max_length=10, verbose_name='source')),
                ('episodes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1500)], verbose_name='episodes')),
                ('status', models.CharField(choices=[('finished', 'Finished'), ('airing', 'Airing'), ('upcoming', 'Upcoming')], default='airing', max_length=10, verbose_name='status')),
                ('aired_from', models.DateField(verbose_name='aired from')),
                ('aired_to', models.DateField(blank=True, null=True, verbose_name='aired to')),
                ('duration', models.CharField(blank=True, max_length=20, verbose_name='duration')),
                ('rating', models.CharField(choices=[('g', 'G - All Ages'), ('pg', 'PG - Children'), ('pg13', 'PG-13 - Teens 13 and Older'), ('r', 'R - 17+ (Violence & Profanity)'), ('rplus', 'R+ - Profanity & Mild Nudity'), ('rx', 'RX - Hentai')], default='pg13', max_length=10, verbose_name='rating')),
                ('website', models.URLField(blank=True, max_length=255, verbose_name='website')),
                ('is_recommended', models.BooleanField(default=False, verbose_name='is recommended')),
                ('score', models.FloatField(blank=True, null=True, verbose_name='score')),
                ('ranked', models.PositiveIntegerField(default=0, verbose_name='ranked')),
                ('popularity', models.PositiveIntegerField(default=0, verbose_name='popularity')),
                ('members', models.PositiveIntegerField(default=0, verbose_name='members')),
                ('favorites', models.PositiveIntegerField(default=0, verbose_name='favorites')),
                ('genres', models.ManyToManyField(to='genres.genre', verbose_name='genres')),
                ('licensors_id', models.ForeignKey(blank=True, limit_choices_to={'is_available': True, 'type': 'licensor'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='licensed_animes', to='producers.producer', verbose_name='licensors')),
                ('producers', models.ManyToManyField(limit_choices_to={'is_available': True, 'type': 'distributor'}, related_name='produced_animes', to='producers.producer', verbose_name='producers')),
                ('studio_id', models.ForeignKey(limit_choices_to={'is_available': True, 'type': 'studio'}, on_delete=django.db.models.deletion.CASCADE, related_name='studio_animes', to='producers.producer', verbose_name='studio')),
                ('themes', models.ManyToManyField(to='genres.theme', verbose_name='themes')),
                ('broadcast_id', models.ForeignKey(blank=True, limit_choices_to={'is_available': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='animes.broadcast', verbose_name='broadcast')),
            ],
            options={
                'verbose_name': 'anime',
                'verbose_name_plural': 'animes',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='AnimeStats',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_available', models.BooleanField(db_index=True, default=True, verbose_name='is available')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='updated at')),
                ('watching', models.PositiveIntegerField(default=0)),
                ('completed', models.PositiveIntegerField(default=0)),
                ('on_hold', models.PositiveIntegerField(default=0)),
                ('dropped', models.PositiveIntegerField(default=0)),
                ('plan_to_watch', models.PositiveIntegerField(default=0)),
                ('total', models.PositiveIntegerField(default=0)),
                ('anime_id', models.OneToOneField(limit_choices_to={'is_available': True}, on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='animes.anime')),
            ],
            options={
                'verbose_name': 'anime stats',
                'verbose_name_plural': 'anime stats',
                'ordering': ['pk'],
            },
        ),
    ]
