# Generated by Django 5.0.1 on 2024-06-08 03:52

import apps.utils.paths
import apps.utils.validators
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('animes', '0001_initial'),
        ('mangas', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnimeList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_available', models.BooleanField(db_index=True, default=True, verbose_name='is available')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='updated at')),
                ('banner', models.ImageField(blank=True, null=True, upload_to=apps.utils.paths.image_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'webp']), apps.utils.validators.ImageSizeValidator(max_height=1500, max_width=500), apps.utils.validators.FileSizeValidator(limit_mb=1)], verbose_name='banner')),
                ('is_public', models.BooleanField(default=True, verbose_name='is public')),
                ('user', models.ForeignKey(limit_choices_to={'is_available': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'animelist',
                'verbose_name_plural': 'animelist',
            },
        ),
        migrations.CreateModel(
            name='AnimeListItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_available', models.BooleanField(db_index=True, default=True, verbose_name='is available')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='updated at')),
                ('status', models.CharField(choices=[('watching', 'Watching'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('dropped', 'Dropped'), ('plan_watch', 'Plan to Watch')], db_index=True, default='plan_watch', max_length=20, verbose_name='status')),
                ('episodes_watched', models.PositiveIntegerField(default=0, verbose_name='episodes watched')),
                ('score', models.IntegerField(blank=True, choices=[(1, '1 - Appaling'), (2, '2 - Horrible'), (3, '3 - Very Bad'), (4, '4 - Bad'), (5, '5 - Average'), (6, '6 - Fine'), (7, '7 - Good'), (8, '8 - Very Good'), (9, '9 - Great'), (10, '10 - Masterpiece')], null=True, verbose_name='score')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='start date')),
                ('finish_date', models.DateField(blank=True, null=True, verbose_name='finish date')),
                ('tags', models.JSONField(blank=True, default=list, null=True, verbose_name='tags')),
                ('priority', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=10, null=True, verbose_name='priority')),
                ('storage', models.CharField(blank=True, choices=[('dvd', 'DVD'), ('bluray', 'Blu-ray'), ('streaming', 'Streaming'), ('download', 'Download')], max_length=10, null=True, verbose_name='storage')),
                ('times_rewatched', models.PositiveIntegerField(default=0, verbose_name='times rewatched')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_watched', models.BooleanField(db_index=True, default=False, verbose_name='is watched')),
                ('is_favorite', models.BooleanField(db_index=True, default=False, verbose_name='is favorite')),
                ('anime_id', models.ForeignKey(limit_choices_to={'is_available': True}, on_delete=django.db.models.deletion.CASCADE, to='animes.anime', verbose_name='anime')),
                ('animelist_id', models.ForeignKey(limit_choices_to={'is_available': True}, on_delete=django.db.models.deletion.CASCADE, to='playlists.animelist', verbose_name='animelist')),
            ],
            options={
                'verbose_name': 'animelist item',
                'verbose_name_plural': 'animelist items',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='MangaList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_available', models.BooleanField(db_index=True, default=True, verbose_name='is available')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='updated at')),
                ('banner', models.ImageField(blank=True, null=True, upload_to=apps.utils.paths.image_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'webp']), apps.utils.validators.ImageSizeValidator(max_height=1500, max_width=500), apps.utils.validators.FileSizeValidator(limit_mb=1)], verbose_name='banner')),
                ('is_public', models.BooleanField(default=True, verbose_name='is public')),
                ('user', models.ForeignKey(limit_choices_to={'is_available': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'mangalist',
                'verbose_name_plural': 'mangalist',
            },
        ),
        migrations.CreateModel(
            name='MangaListItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_available', models.BooleanField(db_index=True, default=True, verbose_name='is available')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='updated at')),
                ('status', models.CharField(choices=[('reading', 'Reading'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('dropped', 'Dropped'), ('plan_read', 'Plan to Read')], db_index=True, default='plan_read', max_length=20, verbose_name='status')),
                ('volumes_read', models.PositiveIntegerField(default=0, verbose_name='volumes read')),
                ('chapters_read', models.PositiveIntegerField(default=0, verbose_name='chapters read')),
                ('score', models.IntegerField(blank=True, choices=[(1, '1 - Appaling'), (2, '2 - Horrible'), (3, '3 - Very Bad'), (4, '4 - Bad'), (5, '5 - Average'), (6, '6 - Fine'), (7, '7 - Good'), (8, '8 - Very Good'), (9, '9 - Great'), (10, '10 - Masterpiece')], null=True, verbose_name='score')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='start date')),
                ('finish_date', models.DateField(blank=True, null=True, verbose_name='finish date')),
                ('tags', models.JSONField(blank=True, default=list, null=True, verbose_name='tags')),
                ('priority', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=10, null=True, verbose_name='priority')),
                ('storage', models.CharField(blank=True, choices=[('dvd', 'DVD'), ('bluray', 'Blu-ray'), ('streaming', 'Streaming'), ('download', 'Download')], max_length=10, null=True, verbose_name='storage')),
                ('times_reread', models.PositiveIntegerField(default=0, verbose_name='times re-read')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_read', models.BooleanField(db_index=True, default=False, verbose_name='is read')),
                ('is_favorite', models.BooleanField(db_index=True, default=False, verbose_name='is favorite')),
                ('manga_id', models.ForeignKey(limit_choices_to={'is_available': True}, on_delete=django.db.models.deletion.CASCADE, to='mangas.manga', verbose_name='anime')),
                ('mangalist_id', models.ForeignKey(limit_choices_to={'is_available': True}, on_delete=django.db.models.deletion.CASCADE, to='playlists.mangalist', verbose_name='mangalist')),
            ],
            options={
                'verbose_name': 'mangalist item',
                'verbose_name_plural': 'mangalist items',
                'ordering': ['pk'],
            },
        ),
    ]
